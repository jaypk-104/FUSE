// This file was generated based on '(multiple files)'.
// WARNING: Changes might be lost if you edit this file directly.

#include <Outracks.Simulator.Bytecode.Lambda.h>
#include <Outracks.Simulator.Bytecode.ProjectBytecode.h>
#include <Outracks.Simulator.Bytecode.TypeName.h>
#include <Outracks.Simulator.ImmutableList-1.h>
#include <Outracks.Simulator.List.h>
#include <Outracks.Simulator.Protocol.BytecodeGenerated.h>
#include <Outracks.Simulator.Protocol.BytecodeUpdated.h>
#include <Outracks.Simulator.Protocol.DebugLog.h>
#include <Outracks.Simulator.Protocol.Diagnostic.h>
#include <Outracks.Simulator.Protocol.DiagnosticType.h>
#include <Outracks.Simulator.Protocol.DismissDiagnostic.h>
#include <Outracks.Simulator.Protocol.Error.h>
#include <Outracks.Simulator.Protocol.ExceptionInfo.h>
#include <Outracks.Simulator.Protocol.Ready.h>
#include <Outracks.Simulator.Protocol.RegisterName.h>
#include <Outracks.Simulator.Protocol.TriggerProgress.h>
#include <Outracks.Simulator.Protocol.UnhandledException.h>
#include <System.IO.BinaryReader.h>
#include <System.IO.BinaryWriter.h>
#include <Uno.Action2-2.h>
#include <Uno.Bool.h>
#include <Uno.Diagnostics.Debug.h>
#include <Uno.Diagnostics.DebugMessageType.h>
#include <Uno.Double.h>
#include <Uno.Exception.h>
#include <Uno.Func1-2.h>
#include <Uno.Int.h>
#include <Uno.String.h>
#include <Uno.Type.h>
static uString* STRINGS[17];
static uType* TYPES[5];

namespace g{
namespace Outracks{
namespace Simulator{
namespace Protocol{

// /usr/local/share/uno/Packages/Outracks.Simulator.Common.Uno/0.0.0/Messages/BytecodeGenerated.cs
// -----------------------------------------------------------------------------------------------

// public sealed class BytecodeGenerated
// {
// static generated BytecodeGenerated()
static void BytecodeGenerated__cctor__fn(uType* __type)
{
    BytecodeGenerated::MessageType_ = ::STRINGS[0/*"BytecodeGen...*/];
}

static void BytecodeGenerated_build(uType* type)
{
    ::STRINGS[0] = uString::Const("BytecodeGenerated");
    ::STRINGS[1] = uString::Const("BytecodeGenerated: ");
    ::STRINGS[2] = uString::Const("bc4");
    type->SetInterfaces(
        ::g::Outracks::IBinaryMessage_typeof(), offsetof(BytecodeGenerated_type, interface0));
    type->SetFields(0,
        ::g::Outracks::Simulator::Bytecode::ProjectBytecode_typeof(), offsetof(BytecodeGenerated, _Bytecode), 0,
        ::g::Uno::String_typeof(), (uintptr_t)&BytecodeGenerated::MessageType_, uFieldFlagsStatic);
    type->Reflection.SetFields(1,
        new uField("MessageType", 1));
    type->Reflection.SetFunctions(6,
        new uFunction("get_BinaryFormat", NULL, (void*)BytecodeGenerated__get_BinaryFormat_fn, 0, true, ::g::Uno::String_typeof(), 0),
        new uFunction("get_Bytecode", NULL, (void*)BytecodeGenerated__get_Bytecode_fn, 0, false, ::g::Outracks::Simulator::Bytecode::ProjectBytecode_typeof(), 0),
        new uFunction(".ctor", NULL, (void*)BytecodeGenerated__New2_fn, 0, true, type, 1, ::g::Outracks::Simulator::Bytecode::ProjectBytecode_typeof()),
        new uFunction("ReadDataFrom", NULL, (void*)BytecodeGenerated__ReadDataFrom_fn, 0, true, type, 1, ::g::System::IO::BinaryReader_typeof()),
        new uFunction("get_Type", NULL, (void*)BytecodeGenerated__get_Type_fn, 0, false, ::g::Uno::String_typeof(), 0),
        new uFunction("WriteDataTo", NULL, (void*)BytecodeGenerated__WriteDataTo_fn, 0, false, uVoid_typeof(), 1, ::g::System::IO::BinaryWriter_typeof()));
}

BytecodeGenerated_type* BytecodeGenerated_typeof()
{
    static uSStrong<BytecodeGenerated_type*> type;
    if (type != NULL) return type;

    uTypeOptions options;
    options.FieldCount = 2;
    options.InterfaceCount = 1;
    options.ObjectSize = sizeof(BytecodeGenerated);
    options.TypeSize = sizeof(BytecodeGenerated_type);
    type = (BytecodeGenerated_type*)uClassType::New("Outracks.Simulator.Protocol.BytecodeGenerated", options);
    type->fp_build_ = BytecodeGenerated_build;
    type->fp_ctor_ = (void*)BytecodeGenerated__New1_fn;
    type->fp_cctor_ = BytecodeGenerated__cctor__fn;
    type->fp_ToString = (void(*)(uObject*, uString**))BytecodeGenerated__ToString_fn;
    type->interface0.fp_WriteDataTo = (void(*)(uObject*, ::g::System::IO::BinaryWriter*))BytecodeGenerated__WriteDataTo_fn;
    type->interface0.fp_get_Type = (void(*)(uObject*, uString**))BytecodeGenerated__get_Type_fn;
    return type;
}

// private BytecodeGenerated()
void BytecodeGenerated__ctor__fn(BytecodeGenerated* __this)
{
    __this->ctor_();
}

// public BytecodeGenerated(Outracks.Simulator.Bytecode.ProjectBytecode bytecode)
void BytecodeGenerated__ctor_1_fn(BytecodeGenerated* __this, ::g::Outracks::Simulator::Bytecode::ProjectBytecode* bytecode)
{
    __this->ctor_1(bytecode);
}

// public static string get_BinaryFormat()
void BytecodeGenerated__get_BinaryFormat_fn(uString** __retval)
{
    *__retval = BytecodeGenerated::BinaryFormat();
}

// public generated Outracks.Simulator.Bytecode.ProjectBytecode get_Bytecode()
void BytecodeGenerated__get_Bytecode_fn(BytecodeGenerated* __this, ::g::Outracks::Simulator::Bytecode::ProjectBytecode** __retval)
{
    *__retval = __this->Bytecode();
}

// private generated void set_Bytecode(Outracks.Simulator.Bytecode.ProjectBytecode value)
void BytecodeGenerated__set_Bytecode_fn(BytecodeGenerated* __this, ::g::Outracks::Simulator::Bytecode::ProjectBytecode* value)
{
    __this->Bytecode(value);
}

// private BytecodeGenerated New()
void BytecodeGenerated__New1_fn(BytecodeGenerated** __retval)
{
    *__retval = BytecodeGenerated::New1();
}

// public BytecodeGenerated New(Outracks.Simulator.Bytecode.ProjectBytecode bytecode)
void BytecodeGenerated__New2_fn(::g::Outracks::Simulator::Bytecode::ProjectBytecode* bytecode, BytecodeGenerated** __retval)
{
    *__retval = BytecodeGenerated::New2(bytecode);
}

// public static Outracks.Simulator.Protocol.BytecodeGenerated ReadDataFrom(System.IO.BinaryReader reader)
void BytecodeGenerated__ReadDataFrom_fn(::g::System::IO::BinaryReader* reader, BytecodeGenerated** __retval)
{
    *__retval = BytecodeGenerated::ReadDataFrom(reader);
}

// public override sealed string ToString()
void BytecodeGenerated__ToString_fn(BytecodeGenerated* __this, uString** __retval)
{
    uStackFrame __("Outracks.Simulator.Protocol.BytecodeGenerated", "ToString()");
    return *__retval = ::g::Uno::String::op_Addition2(::STRINGS[1/*"BytecodeGen...*/], uPtr(uPtr(__this->Bytecode())->Reify)->ToString()), void();
}

// public string get_Type()
void BytecodeGenerated__get_Type_fn(BytecodeGenerated* __this, uString** __retval)
{
    *__retval = __this->Type();
}

// public void WriteDataTo(System.IO.BinaryWriter writer)
void BytecodeGenerated__WriteDataTo_fn(BytecodeGenerated* __this, ::g::System::IO::BinaryWriter* writer)
{
    __this->WriteDataTo(writer);
}

uSStrong<uString*> BytecodeGenerated::MessageType_;

// private BytecodeGenerated() [instance]
void BytecodeGenerated::ctor_()
{
}

// public BytecodeGenerated(Outracks.Simulator.Bytecode.ProjectBytecode bytecode) [instance]
void BytecodeGenerated::ctor_1(::g::Outracks::Simulator::Bytecode::ProjectBytecode* bytecode)
{
    Bytecode(bytecode);
}

// public generated Outracks.Simulator.Bytecode.ProjectBytecode get_Bytecode() [instance]
::g::Outracks::Simulator::Bytecode::ProjectBytecode* BytecodeGenerated::Bytecode()
{
    return _Bytecode;
}

// private generated void set_Bytecode(Outracks.Simulator.Bytecode.ProjectBytecode value) [instance]
void BytecodeGenerated::Bytecode(::g::Outracks::Simulator::Bytecode::ProjectBytecode* value)
{
    _Bytecode = value;
}

// public string get_Type() [instance]
uString* BytecodeGenerated::Type()
{
    return BytecodeGenerated::MessageType_;
}

// public void WriteDataTo(System.IO.BinaryWriter writer) [instance]
void BytecodeGenerated::WriteDataTo(::g::System::IO::BinaryWriter* writer)
{
    uStackFrame __("Outracks.Simulator.Protocol.BytecodeGenerated", "WriteDataTo(System.IO.BinaryWriter)");
    uPtr(Bytecode())->WriteDataTo(writer);
}

// private BytecodeGenerated New() [static]
BytecodeGenerated* BytecodeGenerated::New1()
{
    BytecodeGenerated* obj2 = (BytecodeGenerated*)uNew(BytecodeGenerated_typeof());
    obj2->ctor_();
    return obj2;
}

// public BytecodeGenerated New(Outracks.Simulator.Bytecode.ProjectBytecode bytecode) [static]
BytecodeGenerated* BytecodeGenerated::New2(::g::Outracks::Simulator::Bytecode::ProjectBytecode* bytecode)
{
    BytecodeGenerated* obj1 = (BytecodeGenerated*)uNew(BytecodeGenerated_typeof());
    obj1->ctor_1(bytecode);
    return obj1;
}

// public static Outracks.Simulator.Protocol.BytecodeGenerated ReadDataFrom(System.IO.BinaryReader reader) [static]
BytecodeGenerated* BytecodeGenerated::ReadDataFrom(::g::System::IO::BinaryReader* reader)
{
    uStackFrame __("Outracks.Simulator.Protocol.BytecodeGenerated", "ReadDataFrom(System.IO.BinaryReader)");
    BytecodeGenerated_typeof()->Init();
    ::g::Outracks::Simulator::Bytecode::ProjectBytecode* bytecode = ::g::Outracks::Simulator::Bytecode::ProjectBytecode::ReadDataFrom(reader);
    return BytecodeGenerated::New2(bytecode);
}

// public static string get_BinaryFormat() [static]
uString* BytecodeGenerated::BinaryFormat()
{
    BytecodeGenerated_typeof()->Init();
    return ::STRINGS[2/*"bc4"*/];
}
// }

// /usr/local/share/uno/Packages/Outracks.Simulator.Common.Uno/0.0.0/Messages/BytecodeUpdated.cs
// ---------------------------------------------------------------------------------------------

// public sealed class BytecodeUpdated
// {
// static generated BytecodeUpdated()
static void BytecodeUpdated__cctor__fn(uType* __type)
{
    BytecodeUpdated::MessageType_ = ::STRINGS[3/*"BytecodeUpd...*/];
}

static void BytecodeUpdated_build(uType* type)
{
    ::STRINGS[3] = uString::Const("BytecodeUpdated");
    ::STRINGS[4] = uString::Const("BytecodeUpdated: ");
    type->SetInterfaces(
        ::g::Outracks::IBinaryMessage_typeof(), offsetof(BytecodeUpdated_type, interface0));
    type->SetFields(0,
        ::g::Outracks::Simulator::Bytecode::Lambda_typeof(), offsetof(BytecodeUpdated, _Function), 0,
        ::g::Uno::String_typeof(), (uintptr_t)&BytecodeUpdated::MessageType_, uFieldFlagsStatic);
    type->Reflection.SetFields(1,
        new uField("MessageType", 1));
    type->Reflection.SetFunctions(5,
        new uFunction("get_Function", NULL, (void*)BytecodeUpdated__get_Function_fn, 0, false, ::g::Outracks::Simulator::Bytecode::Lambda_typeof(), 0),
        new uFunction(".ctor", NULL, (void*)BytecodeUpdated__New2_fn, 0, true, type, 1, ::g::Outracks::Simulator::Bytecode::Lambda_typeof()),
        new uFunction("ReadDataFrom", NULL, (void*)BytecodeUpdated__ReadDataFrom_fn, 0, true, type, 1, ::g::System::IO::BinaryReader_typeof()),
        new uFunction("get_Type", NULL, (void*)BytecodeUpdated__get_Type_fn, 0, false, ::g::Uno::String_typeof(), 0),
        new uFunction("WriteDataTo", NULL, (void*)BytecodeUpdated__WriteDataTo_fn, 0, false, uVoid_typeof(), 1, ::g::System::IO::BinaryWriter_typeof()));
}

BytecodeUpdated_type* BytecodeUpdated_typeof()
{
    static uSStrong<BytecodeUpdated_type*> type;
    if (type != NULL) return type;

    uTypeOptions options;
    options.FieldCount = 2;
    options.InterfaceCount = 1;
    options.ObjectSize = sizeof(BytecodeUpdated);
    options.TypeSize = sizeof(BytecodeUpdated_type);
    type = (BytecodeUpdated_type*)uClassType::New("Outracks.Simulator.Protocol.BytecodeUpdated", options);
    type->fp_build_ = BytecodeUpdated_build;
    type->fp_ctor_ = (void*)BytecodeUpdated__New1_fn;
    type->fp_cctor_ = BytecodeUpdated__cctor__fn;
    type->fp_ToString = (void(*)(uObject*, uString**))BytecodeUpdated__ToString_fn;
    type->interface0.fp_WriteDataTo = (void(*)(uObject*, ::g::System::IO::BinaryWriter*))BytecodeUpdated__WriteDataTo_fn;
    type->interface0.fp_get_Type = (void(*)(uObject*, uString**))BytecodeUpdated__get_Type_fn;
    return type;
}

// private BytecodeUpdated()
void BytecodeUpdated__ctor__fn(BytecodeUpdated* __this)
{
    __this->ctor_();
}

// public BytecodeUpdated(Outracks.Simulator.Bytecode.Lambda function)
void BytecodeUpdated__ctor_1_fn(BytecodeUpdated* __this, ::g::Outracks::Simulator::Bytecode::Lambda* function)
{
    __this->ctor_1(function);
}

// public generated Outracks.Simulator.Bytecode.Lambda get_Function()
void BytecodeUpdated__get_Function_fn(BytecodeUpdated* __this, ::g::Outracks::Simulator::Bytecode::Lambda** __retval)
{
    *__retval = __this->Function();
}

// private generated void set_Function(Outracks.Simulator.Bytecode.Lambda value)
void BytecodeUpdated__set_Function_fn(BytecodeUpdated* __this, ::g::Outracks::Simulator::Bytecode::Lambda* value)
{
    __this->Function(value);
}

// private BytecodeUpdated New()
void BytecodeUpdated__New1_fn(BytecodeUpdated** __retval)
{
    *__retval = BytecodeUpdated::New1();
}

// public BytecodeUpdated New(Outracks.Simulator.Bytecode.Lambda function)
void BytecodeUpdated__New2_fn(::g::Outracks::Simulator::Bytecode::Lambda* function, BytecodeUpdated** __retval)
{
    *__retval = BytecodeUpdated::New2(function);
}

// public static Outracks.Simulator.Protocol.BytecodeUpdated ReadDataFrom(System.IO.BinaryReader reader)
void BytecodeUpdated__ReadDataFrom_fn(::g::System::IO::BinaryReader* reader, BytecodeUpdated** __retval)
{
    *__retval = BytecodeUpdated::ReadDataFrom(reader);
}

// public override sealed string ToString()
void BytecodeUpdated__ToString_fn(BytecodeUpdated* __this, uString** __retval)
{
    uStackFrame __("Outracks.Simulator.Protocol.BytecodeUpdated", "ToString()");
    return *__retval = ::g::Uno::String::op_Addition2(::STRINGS[4/*"BytecodeUpd...*/], uPtr(__this->Function())->ToString()), void();
}

// public string get_Type()
void BytecodeUpdated__get_Type_fn(BytecodeUpdated* __this, uString** __retval)
{
    *__retval = __this->Type();
}

// public void WriteDataTo(System.IO.BinaryWriter writer)
void BytecodeUpdated__WriteDataTo_fn(BytecodeUpdated* __this, ::g::System::IO::BinaryWriter* writer)
{
    __this->WriteDataTo(writer);
}

uSStrong<uString*> BytecodeUpdated::MessageType_;

// private BytecodeUpdated() [instance]
void BytecodeUpdated::ctor_()
{
}

// public BytecodeUpdated(Outracks.Simulator.Bytecode.Lambda function) [instance]
void BytecodeUpdated::ctor_1(::g::Outracks::Simulator::Bytecode::Lambda* function)
{
    Function(function);
}

// public generated Outracks.Simulator.Bytecode.Lambda get_Function() [instance]
::g::Outracks::Simulator::Bytecode::Lambda* BytecodeUpdated::Function()
{
    return _Function;
}

// private generated void set_Function(Outracks.Simulator.Bytecode.Lambda value) [instance]
void BytecodeUpdated::Function(::g::Outracks::Simulator::Bytecode::Lambda* value)
{
    _Function = value;
}

// public string get_Type() [instance]
uString* BytecodeUpdated::Type()
{
    return BytecodeUpdated::MessageType_;
}

// public void WriteDataTo(System.IO.BinaryWriter writer) [instance]
void BytecodeUpdated::WriteDataTo(::g::System::IO::BinaryWriter* writer)
{
    uStackFrame __("Outracks.Simulator.Protocol.BytecodeUpdated", "WriteDataTo(System.IO.BinaryWriter)");
    ::g::Outracks::Simulator::Bytecode::Lambda::Write2(Function(), writer);
}

// private BytecodeUpdated New() [static]
BytecodeUpdated* BytecodeUpdated::New1()
{
    BytecodeUpdated* obj2 = (BytecodeUpdated*)uNew(BytecodeUpdated_typeof());
    obj2->ctor_();
    return obj2;
}

// public BytecodeUpdated New(Outracks.Simulator.Bytecode.Lambda function) [static]
BytecodeUpdated* BytecodeUpdated::New2(::g::Outracks::Simulator::Bytecode::Lambda* function)
{
    BytecodeUpdated* obj1 = (BytecodeUpdated*)uNew(BytecodeUpdated_typeof());
    obj1->ctor_1(function);
    return obj1;
}

// public static Outracks.Simulator.Protocol.BytecodeUpdated ReadDataFrom(System.IO.BinaryReader reader) [static]
BytecodeUpdated* BytecodeUpdated::ReadDataFrom(::g::System::IO::BinaryReader* reader)
{
    uStackFrame __("Outracks.Simulator.Protocol.BytecodeUpdated", "ReadDataFrom(System.IO.BinaryReader)");
    BytecodeUpdated_typeof()->Init();
    ::g::Outracks::Simulator::Bytecode::Lambda* function = ::g::Outracks::Simulator::Bytecode::Lambda::Read2(reader);
    return BytecodeUpdated::New2(function);
}
// }

// /usr/local/share/uno/Packages/Outracks.Simulator.Common.Uno/0.0.0/Messages/DebugLog.cs
// --------------------------------------------------------------------------------------

// public sealed class DebugLog
// {
// static generated DebugLog()
static void DebugLog__cctor__fn(uType* __type)
{
    DebugLog::MessageType_ = ::STRINGS[5/*"DebugLog"*/];
}

static void DebugLog_build(uType* type)
{
    ::STRINGS[5] = uString::Const("DebugLog");
    type->SetInterfaces(
        ::g::Outracks::IBinaryMessage_typeof(), offsetof(DebugLog_type, interface0));
    type->SetFields(0,
        ::g::Uno::String_typeof(), offsetof(DebugLog, _DeviceId), 0,
        ::g::Uno::String_typeof(), offsetof(DebugLog, _DeviceName), 0,
        ::g::Uno::String_typeof(), offsetof(DebugLog, _Message), 0,
        ::g::Uno::String_typeof(), (uintptr_t)&DebugLog::MessageType_, uFieldFlagsStatic);
    type->Reflection.SetFields(1,
        new uField("MessageType", 3));
    type->Reflection.SetFunctions(7,
        new uFunction("get_DeviceId", NULL, (void*)DebugLog__get_DeviceId_fn, 0, false, ::g::Uno::String_typeof(), 0),
        new uFunction("get_DeviceName", NULL, (void*)DebugLog__get_DeviceName_fn, 0, false, ::g::Uno::String_typeof(), 0),
        new uFunction("get_Message", NULL, (void*)DebugLog__get_Message_fn, 0, false, ::g::Uno::String_typeof(), 0),
        new uFunction(".ctor", NULL, (void*)DebugLog__New2_fn, 0, true, type, 3, ::g::Uno::String_typeof(), ::g::Uno::String_typeof(), ::g::Uno::String_typeof()),
        new uFunction("ReadDataFrom", NULL, (void*)DebugLog__ReadDataFrom_fn, 0, true, type, 1, ::g::System::IO::BinaryReader_typeof()),
        new uFunction("get_Type", NULL, (void*)DebugLog__get_Type_fn, 0, false, ::g::Uno::String_typeof(), 0),
        new uFunction("WriteDataTo", NULL, (void*)DebugLog__WriteDataTo_fn, 0, false, uVoid_typeof(), 1, ::g::System::IO::BinaryWriter_typeof()));
}

DebugLog_type* DebugLog_typeof()
{
    static uSStrong<DebugLog_type*> type;
    if (type != NULL) return type;

    uTypeOptions options;
    options.FieldCount = 4;
    options.InterfaceCount = 1;
    options.ObjectSize = sizeof(DebugLog);
    options.TypeSize = sizeof(DebugLog_type);
    type = (DebugLog_type*)uClassType::New("Outracks.Simulator.Protocol.DebugLog", options);
    type->fp_build_ = DebugLog_build;
    type->fp_ctor_ = (void*)DebugLog__New1_fn;
    type->fp_cctor_ = DebugLog__cctor__fn;
    type->interface0.fp_WriteDataTo = (void(*)(uObject*, ::g::System::IO::BinaryWriter*))DebugLog__WriteDataTo_fn;
    type->interface0.fp_get_Type = (void(*)(uObject*, uString**))DebugLog__get_Type_fn;
    return type;
}

// private DebugLog()
void DebugLog__ctor__fn(DebugLog* __this)
{
    __this->ctor_();
}

// public DebugLog(string deviceId, string deviceName, string message)
void DebugLog__ctor_1_fn(DebugLog* __this, uString* deviceId, uString* deviceName, uString* message)
{
    __this->ctor_1(deviceId, deviceName, message);
}

// public generated string get_DeviceId()
void DebugLog__get_DeviceId_fn(DebugLog* __this, uString** __retval)
{
    *__retval = __this->DeviceId();
}

// private generated void set_DeviceId(string value)
void DebugLog__set_DeviceId_fn(DebugLog* __this, uString* value)
{
    __this->DeviceId(value);
}

// public generated string get_DeviceName()
void DebugLog__get_DeviceName_fn(DebugLog* __this, uString** __retval)
{
    *__retval = __this->DeviceName();
}

// private generated void set_DeviceName(string value)
void DebugLog__set_DeviceName_fn(DebugLog* __this, uString* value)
{
    __this->DeviceName(value);
}

// public generated string get_Message()
void DebugLog__get_Message_fn(DebugLog* __this, uString** __retval)
{
    *__retval = __this->Message();
}

// private generated void set_Message(string value)
void DebugLog__set_Message_fn(DebugLog* __this, uString* value)
{
    __this->Message(value);
}

// private DebugLog New()
void DebugLog__New1_fn(DebugLog** __retval)
{
    *__retval = DebugLog::New1();
}

// public DebugLog New(string deviceId, string deviceName, string message)
void DebugLog__New2_fn(uString* deviceId, uString* deviceName, uString* message, DebugLog** __retval)
{
    *__retval = DebugLog::New2(deviceId, deviceName, message);
}

// public static Outracks.Simulator.Protocol.DebugLog ReadDataFrom(System.IO.BinaryReader reader)
void DebugLog__ReadDataFrom_fn(::g::System::IO::BinaryReader* reader, DebugLog** __retval)
{
    *__retval = DebugLog::ReadDataFrom(reader);
}

// public string get_Type()
void DebugLog__get_Type_fn(DebugLog* __this, uString** __retval)
{
    *__retval = __this->Type();
}

// public void WriteDataTo(System.IO.BinaryWriter writer)
void DebugLog__WriteDataTo_fn(DebugLog* __this, ::g::System::IO::BinaryWriter* writer)
{
    __this->WriteDataTo(writer);
}

uSStrong<uString*> DebugLog::MessageType_;

// private DebugLog() [instance]
void DebugLog::ctor_()
{
}

// public DebugLog(string deviceId, string deviceName, string message) [instance]
void DebugLog::ctor_1(uString* deviceId, uString* deviceName, uString* message)
{
    DeviceId(deviceId);
    DeviceName(deviceName);
    Message(message);
}

// public generated string get_DeviceId() [instance]
uString* DebugLog::DeviceId()
{
    return _DeviceId;
}

// private generated void set_DeviceId(string value) [instance]
void DebugLog::DeviceId(uString* value)
{
    _DeviceId = value;
}

// public generated string get_DeviceName() [instance]
uString* DebugLog::DeviceName()
{
    return _DeviceName;
}

// private generated void set_DeviceName(string value) [instance]
void DebugLog::DeviceName(uString* value)
{
    _DeviceName = value;
}

// public generated string get_Message() [instance]
uString* DebugLog::Message()
{
    return _Message;
}

// private generated void set_Message(string value) [instance]
void DebugLog::Message(uString* value)
{
    _Message = value;
}

// public string get_Type() [instance]
uString* DebugLog::Type()
{
    return DebugLog::MessageType_;
}

// public void WriteDataTo(System.IO.BinaryWriter writer) [instance]
void DebugLog::WriteDataTo(::g::System::IO::BinaryWriter* writer)
{
    uStackFrame __("Outracks.Simulator.Protocol.DebugLog", "WriteDataTo(System.IO.BinaryWriter)");
    uPtr(writer)->Write6(DeviceId());
    writer->Write6(DeviceName());
    writer->Write6(Message());
}

// private DebugLog New() [static]
DebugLog* DebugLog::New1()
{
    DebugLog* obj2 = (DebugLog*)uNew(DebugLog_typeof());
    obj2->ctor_();
    return obj2;
}

// public DebugLog New(string deviceId, string deviceName, string message) [static]
DebugLog* DebugLog::New2(uString* deviceId, uString* deviceName, uString* message)
{
    DebugLog* obj1 = (DebugLog*)uNew(DebugLog_typeof());
    obj1->ctor_1(deviceId, deviceName, message);
    return obj1;
}

// public static Outracks.Simulator.Protocol.DebugLog ReadDataFrom(System.IO.BinaryReader reader) [static]
DebugLog* DebugLog::ReadDataFrom(::g::System::IO::BinaryReader* reader)
{
    uStackFrame __("Outracks.Simulator.Protocol.DebugLog", "ReadDataFrom(System.IO.BinaryReader)");
    DebugLog_typeof()->Init();
    uString* deviceId = uPtr(reader)->ReadString();
    uString* deviceName = reader->ReadString();
    uString* message = reader->ReadString();
    return DebugLog::New2(deviceId, deviceName, message);
}
// }

// /usr/local/share/uno/Packages/Outracks.Simulator.Common.Uno/0.0.0/Messages/Diagnostic.cs
// ----------------------------------------------------------------------------------------

// public sealed class Diagnostic
// {
// static generated Diagnostic()
static void Diagnostic__cctor__fn(uType* __type)
{
    Diagnostic::MessageType_ = ::STRINGS[6/*"Diagnostic"*/];
}

static void Diagnostic_build(uType* type)
{
    ::STRINGS[6] = uString::Const("Diagnostic");
    ::STRINGS[7] = uString::Const("");
    type->SetInterfaces(
        ::g::Outracks::IBinaryMessage_typeof(), offsetof(Diagnostic_type, interface0));
    type->SetFields(0,
        ::g::Uno::Int_typeof(), offsetof(Diagnostic, _ColumnNumber), 0,
        ::g::Uno::String_typeof(), offsetof(Diagnostic, _Details), 0,
        ::g::Uno::String_typeof(), offsetof(Diagnostic, _DeviceId), 0,
        ::g::Uno::String_typeof(), offsetof(Diagnostic, _DeviceName), 0,
        ::g::Uno::Int_typeof(), offsetof(Diagnostic, _DiagnosticId), 0,
        ::g::Outracks::Simulator::Protocol::DiagnosticType_typeof(), offsetof(Diagnostic, _DiagnosticType), 0,
        ::g::Uno::Int_typeof(), offsetof(Diagnostic, _LineNumber), 0,
        ::g::Uno::String_typeof(), offsetof(Diagnostic, _Message), 0,
        ::g::Uno::String_typeof(), offsetof(Diagnostic, _SourceFile), 0,
        ::g::Uno::String_typeof(), (uintptr_t)&Diagnostic::MessageType_, uFieldFlagsStatic,
        ::g::Uno::Int_typeof(), (uintptr_t)&Diagnostic::_idEnumerator_, uFieldFlagsStatic);
    type->Reflection.SetFields(1,
        new uField("MessageType", 9));
    type->Reflection.SetFunctions(13,
        new uFunction("get_ColumnNumber", NULL, (void*)Diagnostic__get_ColumnNumber_fn, 0, false, ::g::Uno::Int_typeof(), 0),
        new uFunction("get_Details", NULL, (void*)Diagnostic__get_Details_fn, 0, false, ::g::Uno::String_typeof(), 0),
        new uFunction("get_DeviceId", NULL, (void*)Diagnostic__get_DeviceId_fn, 0, false, ::g::Uno::String_typeof(), 0),
        new uFunction("get_DeviceName", NULL, (void*)Diagnostic__get_DeviceName_fn, 0, false, ::g::Uno::String_typeof(), 0),
        new uFunction("get_DiagnosticId", NULL, (void*)Diagnostic__get_DiagnosticId_fn, 0, false, ::g::Uno::Int_typeof(), 0),
        new uFunction("get_DiagnosticType", NULL, (void*)Diagnostic__get_DiagnosticType_fn, 0, false, ::g::Outracks::Simulator::Protocol::DiagnosticType_typeof(), 0),
        new uFunction("get_LineNumber", NULL, (void*)Diagnostic__get_LineNumber_fn, 0, false, ::g::Uno::Int_typeof(), 0),
        new uFunction("get_Message", NULL, (void*)Diagnostic__get_Message_fn, 0, false, ::g::Uno::String_typeof(), 0),
        new uFunction(".ctor", NULL, (void*)Diagnostic__New1_fn, 0, true, type, 8, ::g::Uno::String_typeof(), ::g::Uno::String_typeof(), ::g::Uno::String_typeof(), ::g::Uno::String_typeof(), ::g::Uno::String_typeof(), ::g::Uno::Int_typeof(), ::g::Uno::Int_typeof(), ::g::Uno::Int_typeof()),
        new uFunction("ReadDataFrom", NULL, (void*)Diagnostic__ReadDataFrom_fn, 0, true, type, 1, ::g::System::IO::BinaryReader_typeof()),
        new uFunction("get_SourceFile", NULL, (void*)Diagnostic__get_SourceFile_fn, 0, false, ::g::Uno::String_typeof(), 0),
        new uFunction("get_Type", NULL, (void*)Diagnostic__get_Type_fn, 0, false, ::g::Uno::String_typeof(), 0),
        new uFunction("WriteDataTo", NULL, (void*)Diagnostic__WriteDataTo_fn, 0, false, uVoid_typeof(), 1, ::g::System::IO::BinaryWriter_typeof()));
}

Diagnostic_type* Diagnostic_typeof()
{
    static uSStrong<Diagnostic_type*> type;
    if (type != NULL) return type;

    uTypeOptions options;
    options.FieldCount = 11;
    options.InterfaceCount = 1;
    options.ObjectSize = sizeof(Diagnostic);
    options.TypeSize = sizeof(Diagnostic_type);
    type = (Diagnostic_type*)uClassType::New("Outracks.Simulator.Protocol.Diagnostic", options);
    type->fp_build_ = Diagnostic_build;
    type->fp_cctor_ = Diagnostic__cctor__fn;
    type->interface0.fp_WriteDataTo = (void(*)(uObject*, ::g::System::IO::BinaryWriter*))Diagnostic__WriteDataTo_fn;
    type->interface0.fp_get_Type = (void(*)(uObject*, uString**))Diagnostic__get_Type_fn;
    return type;
}

// public Diagnostic(string deviceId, string deviceName, string message, string details, string sourceFile, int lineNumber, int columnNumber, [int diagnosticId])
void Diagnostic__ctor__fn(Diagnostic* __this, uString* deviceId, uString* deviceName, uString* message, uString* details, uString* sourceFile, int32_t* lineNumber, int32_t* columnNumber, int32_t* diagnosticId)
{
    __this->ctor_(deviceId, deviceName, message, details, sourceFile, *lineNumber, *columnNumber, *diagnosticId);
}

// public generated int get_ColumnNumber()
void Diagnostic__get_ColumnNumber_fn(Diagnostic* __this, int32_t* __retval)
{
    *__retval = __this->ColumnNumber();
}

// private generated void set_ColumnNumber(int value)
void Diagnostic__set_ColumnNumber_fn(Diagnostic* __this, int32_t* value)
{
    __this->ColumnNumber(*value);
}

// public generated string get_Details()
void Diagnostic__get_Details_fn(Diagnostic* __this, uString** __retval)
{
    *__retval = __this->Details();
}

// private generated void set_Details(string value)
void Diagnostic__set_Details_fn(Diagnostic* __this, uString* value)
{
    __this->Details(value);
}

// public generated string get_DeviceId()
void Diagnostic__get_DeviceId_fn(Diagnostic* __this, uString** __retval)
{
    *__retval = __this->DeviceId();
}

// private generated void set_DeviceId(string value)
void Diagnostic__set_DeviceId_fn(Diagnostic* __this, uString* value)
{
    __this->DeviceId(value);
}

// public generated string get_DeviceName()
void Diagnostic__get_DeviceName_fn(Diagnostic* __this, uString** __retval)
{
    *__retval = __this->DeviceName();
}

// private generated void set_DeviceName(string value)
void Diagnostic__set_DeviceName_fn(Diagnostic* __this, uString* value)
{
    __this->DeviceName(value);
}

// public generated int get_DiagnosticId()
void Diagnostic__get_DiagnosticId_fn(Diagnostic* __this, int32_t* __retval)
{
    *__retval = __this->DiagnosticId();
}

// private generated void set_DiagnosticId(int value)
void Diagnostic__set_DiagnosticId_fn(Diagnostic* __this, int32_t* value)
{
    __this->DiagnosticId(*value);
}

// public generated Outracks.Simulator.Protocol.DiagnosticType get_DiagnosticType()
void Diagnostic__get_DiagnosticType_fn(Diagnostic* __this, int32_t* __retval)
{
    *__retval = __this->DiagnosticType();
}

// private generated void set_DiagnosticType(Outracks.Simulator.Protocol.DiagnosticType value)
void Diagnostic__set_DiagnosticType_fn(Diagnostic* __this, int32_t* value)
{
    __this->DiagnosticType(*value);
}

// public generated int get_LineNumber()
void Diagnostic__get_LineNumber_fn(Diagnostic* __this, int32_t* __retval)
{
    *__retval = __this->LineNumber();
}

// private generated void set_LineNumber(int value)
void Diagnostic__set_LineNumber_fn(Diagnostic* __this, int32_t* value)
{
    __this->LineNumber(*value);
}

// public generated string get_Message()
void Diagnostic__get_Message_fn(Diagnostic* __this, uString** __retval)
{
    *__retval = __this->Message();
}

// private generated void set_Message(string value)
void Diagnostic__set_Message_fn(Diagnostic* __this, uString* value)
{
    __this->Message(value);
}

// public Diagnostic New(string deviceId, string deviceName, string message, string details, string sourceFile, int lineNumber, int columnNumber, [int diagnosticId])
void Diagnostic__New1_fn(uString* deviceId, uString* deviceName, uString* message, uString* details, uString* sourceFile, int32_t* lineNumber, int32_t* columnNumber, int32_t* diagnosticId, Diagnostic** __retval)
{
    *__retval = Diagnostic::New1(deviceId, deviceName, message, details, sourceFile, *lineNumber, *columnNumber, *diagnosticId);
}

// private static string NullIfEmpty(string s)
void Diagnostic__NullIfEmpty_fn(uString* s, uString** __retval)
{
    *__retval = Diagnostic::NullIfEmpty(s);
}

// public static Outracks.Simulator.Protocol.Diagnostic ReadDataFrom(System.IO.BinaryReader reader)
void Diagnostic__ReadDataFrom_fn(::g::System::IO::BinaryReader* reader, Diagnostic** __retval)
{
    *__retval = Diagnostic::ReadDataFrom(reader);
}

// public generated string get_SourceFile()
void Diagnostic__get_SourceFile_fn(Diagnostic* __this, uString** __retval)
{
    *__retval = __this->SourceFile();
}

// private generated void set_SourceFile(string value)
void Diagnostic__set_SourceFile_fn(Diagnostic* __this, uString* value)
{
    __this->SourceFile(value);
}

// public string get_Type()
void Diagnostic__get_Type_fn(Diagnostic* __this, uString** __retval)
{
    *__retval = __this->Type();
}

// public void WriteDataTo(System.IO.BinaryWriter writer)
void Diagnostic__WriteDataTo_fn(Diagnostic* __this, ::g::System::IO::BinaryWriter* writer)
{
    __this->WriteDataTo(writer);
}

uSStrong<uString*> Diagnostic::MessageType_;
int32_t Diagnostic::_idEnumerator_;

// public Diagnostic(string deviceId, string deviceName, string message, string details, string sourceFile, int lineNumber, int columnNumber, [int diagnosticId]) [instance]
void Diagnostic::ctor_(uString* deviceId, uString* deviceName, uString* message, uString* details, uString* sourceFile, int32_t lineNumber, int32_t columnNumber, int32_t diagnosticId)
{
    DeviceId(deviceId);
    DeviceName(deviceName);
    DiagnosticId((diagnosticId == -1) ? Diagnostic::_idEnumerator_++ : diagnosticId);
    Message(message);
    Details((details != NULL) ? details : ::STRINGS[7/*""*/]);
    SourceFile((sourceFile != NULL) ? sourceFile : ::STRINGS[7/*""*/]);
    LineNumber(lineNumber);
    ColumnNumber(columnNumber);
}

// public generated int get_ColumnNumber() [instance]
int32_t Diagnostic::ColumnNumber()
{
    return _ColumnNumber;
}

// private generated void set_ColumnNumber(int value) [instance]
void Diagnostic::ColumnNumber(int32_t value)
{
    _ColumnNumber = value;
}

// public generated string get_Details() [instance]
uString* Diagnostic::Details()
{
    return _Details;
}

// private generated void set_Details(string value) [instance]
void Diagnostic::Details(uString* value)
{
    _Details = value;
}

// public generated string get_DeviceId() [instance]
uString* Diagnostic::DeviceId()
{
    return _DeviceId;
}

// private generated void set_DeviceId(string value) [instance]
void Diagnostic::DeviceId(uString* value)
{
    _DeviceId = value;
}

// public generated string get_DeviceName() [instance]
uString* Diagnostic::DeviceName()
{
    return _DeviceName;
}

// private generated void set_DeviceName(string value) [instance]
void Diagnostic::DeviceName(uString* value)
{
    _DeviceName = value;
}

// public generated int get_DiagnosticId() [instance]
int32_t Diagnostic::DiagnosticId()
{
    return _DiagnosticId;
}

// private generated void set_DiagnosticId(int value) [instance]
void Diagnostic::DiagnosticId(int32_t value)
{
    _DiagnosticId = value;
}

// public generated Outracks.Simulator.Protocol.DiagnosticType get_DiagnosticType() [instance]
int32_t Diagnostic::DiagnosticType()
{
    return _DiagnosticType;
}

// private generated void set_DiagnosticType(Outracks.Simulator.Protocol.DiagnosticType value) [instance]
void Diagnostic::DiagnosticType(int32_t value)
{
    _DiagnosticType = value;
}

// public generated int get_LineNumber() [instance]
int32_t Diagnostic::LineNumber()
{
    return _LineNumber;
}

// private generated void set_LineNumber(int value) [instance]
void Diagnostic::LineNumber(int32_t value)
{
    _LineNumber = value;
}

// public generated string get_Message() [instance]
uString* Diagnostic::Message()
{
    return _Message;
}

// private generated void set_Message(string value) [instance]
void Diagnostic::Message(uString* value)
{
    _Message = value;
}

// public generated string get_SourceFile() [instance]
uString* Diagnostic::SourceFile()
{
    return _SourceFile;
}

// private generated void set_SourceFile(string value) [instance]
void Diagnostic::SourceFile(uString* value)
{
    _SourceFile = value;
}

// public string get_Type() [instance]
uString* Diagnostic::Type()
{
    return Diagnostic::MessageType_;
}

// public void WriteDataTo(System.IO.BinaryWriter writer) [instance]
void Diagnostic::WriteDataTo(::g::System::IO::BinaryWriter* writer)
{
    uStackFrame __("Outracks.Simulator.Protocol.Diagnostic", "WriteDataTo(System.IO.BinaryWriter)");
    uPtr(writer)->Write6(DeviceId());
    writer->Write6(DeviceName());
    writer->Write6(Message());
    writer->Write6(Details());
    writer->Write6(SourceFile());
    writer->Write5(LineNumber());
    writer->Write5(ColumnNumber());
    writer->Write5(DiagnosticId());
}

// public Diagnostic New(string deviceId, string deviceName, string message, string details, string sourceFile, int lineNumber, int columnNumber, [int diagnosticId]) [static]
Diagnostic* Diagnostic::New1(uString* deviceId, uString* deviceName, uString* message, uString* details, uString* sourceFile, int32_t lineNumber, int32_t columnNumber, int32_t diagnosticId)
{
    Diagnostic* obj1 = (Diagnostic*)uNew(Diagnostic_typeof());
    obj1->ctor_(deviceId, deviceName, message, details, sourceFile, lineNumber, columnNumber, diagnosticId);
    return obj1;
}

// private static string NullIfEmpty(string s) [static]
uString* Diagnostic::NullIfEmpty(uString* s)
{
    Diagnostic_typeof()->Init();

    if (::g::Uno::String::IsNullOrEmpty(s))
        return NULL;

    return s;
}

// public static Outracks.Simulator.Protocol.Diagnostic ReadDataFrom(System.IO.BinaryReader reader) [static]
Diagnostic* Diagnostic::ReadDataFrom(::g::System::IO::BinaryReader* reader)
{
    uStackFrame __("Outracks.Simulator.Protocol.Diagnostic", "ReadDataFrom(System.IO.BinaryReader)");
    Diagnostic_typeof()->Init();
    uString* deviceId = uPtr(reader)->ReadString();
    uString* deviceName = reader->ReadString();
    uString* message = reader->ReadString();
    uString* details = Diagnostic::NullIfEmpty(reader->ReadString());
    uString* sourceFile = Diagnostic::NullIfEmpty(reader->ReadString());
    int32_t lineNumber = reader->ReadInt32();
    int32_t columnNumber = reader->ReadInt32();
    int32_t diagnosticId = reader->ReadInt32();
    return Diagnostic::New1(deviceId, deviceName, message, details, sourceFile, lineNumber, columnNumber, diagnosticId);
}
// }

// /usr/local/share/uno/Packages/Outracks.Simulator.Common.Uno/0.0.0/Messages/Diagnostic.cs
// ----------------------------------------------------------------------------------------

// public enum DiagnosticType
uEnumType* DiagnosticType_typeof()
{
    static uSStrong<uEnumType*> type;
    if (type != NULL) return type;

    type = uEnumType::New("Outracks.Simulator.Protocol.DiagnosticType", ::g::Uno::Int_typeof(), 6);
    type->SetLiterals(
        "Error", 0LL,
        "Warning", 1LL,
        "InternalError", 2LL,
        "Deprecated", 3LL,
        "Unsupported", 4LL,
        "PerformanceWarning", 5LL);
    return type;
}

// /usr/local/share/uno/Packages/Outracks.Simulator.Common.Uno/0.0.0/Messages/Diagnostic.cs
// ----------------------------------------------------------------------------------------

// public sealed class DismissDiagnostic
// {
// static generated DismissDiagnostic()
static void DismissDiagnostic__cctor__fn(uType* __type)
{
    DismissDiagnostic::MessageType_ = ::STRINGS[8/*"DismissDiag...*/];
}

static void DismissDiagnostic_build(uType* type)
{
    ::STRINGS[8] = uString::Const("DismissDiagnostic");
    type->SetInterfaces(
        ::g::Outracks::IBinaryMessage_typeof(), offsetof(DismissDiagnostic_type, interface0));
    type->SetFields(0,
        ::g::Uno::String_typeof(), offsetof(DismissDiagnostic, _DeviceId), 0,
        ::g::Uno::String_typeof(), offsetof(DismissDiagnostic, _DeviceName), 0,
        ::g::Uno::Int_typeof(), offsetof(DismissDiagnostic, _DiagnosticId), 0,
        ::g::Uno::String_typeof(), (uintptr_t)&DismissDiagnostic::MessageType_, uFieldFlagsStatic);
    type->Reflection.SetFields(1,
        new uField("MessageType", 3));
    type->Reflection.SetFunctions(7,
        new uFunction("get_DeviceId", NULL, (void*)DismissDiagnostic__get_DeviceId_fn, 0, false, ::g::Uno::String_typeof(), 0),
        new uFunction("get_DeviceName", NULL, (void*)DismissDiagnostic__get_DeviceName_fn, 0, false, ::g::Uno::String_typeof(), 0),
        new uFunction("get_DiagnosticId", NULL, (void*)DismissDiagnostic__get_DiagnosticId_fn, 0, false, ::g::Uno::Int_typeof(), 0),
        new uFunction(".ctor", NULL, (void*)DismissDiagnostic__New1_fn, 0, true, type, 3, ::g::Uno::String_typeof(), ::g::Uno::String_typeof(), ::g::Uno::Int_typeof()),
        new uFunction("ReadDataFrom", NULL, (void*)DismissDiagnostic__ReadDataFrom_fn, 0, true, type, 1, ::g::System::IO::BinaryReader_typeof()),
        new uFunction("get_Type", NULL, (void*)DismissDiagnostic__get_Type_fn, 0, false, ::g::Uno::String_typeof(), 0),
        new uFunction("WriteDataTo", NULL, (void*)DismissDiagnostic__WriteDataTo_fn, 0, false, uVoid_typeof(), 1, ::g::System::IO::BinaryWriter_typeof()));
}

DismissDiagnostic_type* DismissDiagnostic_typeof()
{
    static uSStrong<DismissDiagnostic_type*> type;
    if (type != NULL) return type;

    uTypeOptions options;
    options.FieldCount = 4;
    options.InterfaceCount = 1;
    options.ObjectSize = sizeof(DismissDiagnostic);
    options.TypeSize = sizeof(DismissDiagnostic_type);
    type = (DismissDiagnostic_type*)uClassType::New("Outracks.Simulator.Protocol.DismissDiagnostic", options);
    type->fp_build_ = DismissDiagnostic_build;
    type->fp_cctor_ = DismissDiagnostic__cctor__fn;
    type->interface0.fp_WriteDataTo = (void(*)(uObject*, ::g::System::IO::BinaryWriter*))DismissDiagnostic__WriteDataTo_fn;
    type->interface0.fp_get_Type = (void(*)(uObject*, uString**))DismissDiagnostic__get_Type_fn;
    return type;
}

// public DismissDiagnostic(string deviceId, string deviceName, int diagnosticId)
void DismissDiagnostic__ctor__fn(DismissDiagnostic* __this, uString* deviceId, uString* deviceName, int32_t* diagnosticId)
{
    __this->ctor_(deviceId, deviceName, *diagnosticId);
}

// public generated string get_DeviceId()
void DismissDiagnostic__get_DeviceId_fn(DismissDiagnostic* __this, uString** __retval)
{
    *__retval = __this->DeviceId();
}

// private generated void set_DeviceId(string value)
void DismissDiagnostic__set_DeviceId_fn(DismissDiagnostic* __this, uString* value)
{
    __this->DeviceId(value);
}

// public generated string get_DeviceName()
void DismissDiagnostic__get_DeviceName_fn(DismissDiagnostic* __this, uString** __retval)
{
    *__retval = __this->DeviceName();
}

// private generated void set_DeviceName(string value)
void DismissDiagnostic__set_DeviceName_fn(DismissDiagnostic* __this, uString* value)
{
    __this->DeviceName(value);
}

// public generated int get_DiagnosticId()
void DismissDiagnostic__get_DiagnosticId_fn(DismissDiagnostic* __this, int32_t* __retval)
{
    *__retval = __this->DiagnosticId();
}

// private generated void set_DiagnosticId(int value)
void DismissDiagnostic__set_DiagnosticId_fn(DismissDiagnostic* __this, int32_t* value)
{
    __this->DiagnosticId(*value);
}

// public DismissDiagnostic New(string deviceId, string deviceName, int diagnosticId)
void DismissDiagnostic__New1_fn(uString* deviceId, uString* deviceName, int32_t* diagnosticId, DismissDiagnostic** __retval)
{
    *__retval = DismissDiagnostic::New1(deviceId, deviceName, *diagnosticId);
}

// public static Outracks.Simulator.Protocol.DismissDiagnostic ReadDataFrom(System.IO.BinaryReader reader)
void DismissDiagnostic__ReadDataFrom_fn(::g::System::IO::BinaryReader* reader, DismissDiagnostic** __retval)
{
    *__retval = DismissDiagnostic::ReadDataFrom(reader);
}

// public string get_Type()
void DismissDiagnostic__get_Type_fn(DismissDiagnostic* __this, uString** __retval)
{
    *__retval = __this->Type();
}

// public void WriteDataTo(System.IO.BinaryWriter writer)
void DismissDiagnostic__WriteDataTo_fn(DismissDiagnostic* __this, ::g::System::IO::BinaryWriter* writer)
{
    __this->WriteDataTo(writer);
}

uSStrong<uString*> DismissDiagnostic::MessageType_;

// public DismissDiagnostic(string deviceId, string deviceName, int diagnosticId) [instance]
void DismissDiagnostic::ctor_(uString* deviceId, uString* deviceName, int32_t diagnosticId)
{
    DeviceId(deviceId);
    DeviceName(deviceName);
    DiagnosticId(diagnosticId);
}

// public generated string get_DeviceId() [instance]
uString* DismissDiagnostic::DeviceId()
{
    return _DeviceId;
}

// private generated void set_DeviceId(string value) [instance]
void DismissDiagnostic::DeviceId(uString* value)
{
    _DeviceId = value;
}

// public generated string get_DeviceName() [instance]
uString* DismissDiagnostic::DeviceName()
{
    return _DeviceName;
}

// private generated void set_DeviceName(string value) [instance]
void DismissDiagnostic::DeviceName(uString* value)
{
    _DeviceName = value;
}

// public generated int get_DiagnosticId() [instance]
int32_t DismissDiagnostic::DiagnosticId()
{
    return _DiagnosticId;
}

// private generated void set_DiagnosticId(int value) [instance]
void DismissDiagnostic::DiagnosticId(int32_t value)
{
    _DiagnosticId = value;
}

// public string get_Type() [instance]
uString* DismissDiagnostic::Type()
{
    return DismissDiagnostic::MessageType_;
}

// public void WriteDataTo(System.IO.BinaryWriter writer) [instance]
void DismissDiagnostic::WriteDataTo(::g::System::IO::BinaryWriter* writer)
{
    uStackFrame __("Outracks.Simulator.Protocol.DismissDiagnostic", "WriteDataTo(System.IO.BinaryWriter)");
    uPtr(writer)->Write6(DeviceId());
    writer->Write6(DeviceName());
    writer->Write5(DiagnosticId());
}

// public DismissDiagnostic New(string deviceId, string deviceName, int diagnosticId) [static]
DismissDiagnostic* DismissDiagnostic::New1(uString* deviceId, uString* deviceName, int32_t diagnosticId)
{
    DismissDiagnostic* obj1 = (DismissDiagnostic*)uNew(DismissDiagnostic_typeof());
    obj1->ctor_(deviceId, deviceName, diagnosticId);
    return obj1;
}

// public static Outracks.Simulator.Protocol.DismissDiagnostic ReadDataFrom(System.IO.BinaryReader reader) [static]
DismissDiagnostic* DismissDiagnostic::ReadDataFrom(::g::System::IO::BinaryReader* reader)
{
    uStackFrame __("Outracks.Simulator.Protocol.DismissDiagnostic", "ReadDataFrom(System.IO.BinaryReader)");
    DismissDiagnostic_typeof()->Init();
    uString* deviceId = uPtr(reader)->ReadString();
    uString* deviceName = reader->ReadString();
    int32_t diagnosticId = reader->ReadInt32();
    return DismissDiagnostic::New1(deviceId, deviceName, diagnosticId);
}
// }

// /usr/local/share/uno/Packages/Outracks.Simulator.Common.Uno/0.0.0/Messages/Error.cs
// -----------------------------------------------------------------------------------

// public sealed class Error
// {
// static generated Error()
static void Error__cctor__fn(uType* __type)
{
    Error::MessageType_ = ::STRINGS[9/*"Error"*/];
}

static void Error_build(uType* type)
{
    ::STRINGS[9] = uString::Const("Error");
    ::STRINGS[10] = uString::Const("Read Error");
    ::STRINGS[11] = uString::Const("/usr/local/share/uno/Packages/Outracks.Simulator.Common.Uno/0.0.0/Messages/Error.cs");
    ::STRINGS[12] = uString::Const("Error: ");
    type->SetDependencies(
        ::g::Uno::Diagnostics::Debug_typeof());
    type->SetInterfaces(
        ::g::Outracks::IBinaryMessage_typeof(), offsetof(Error_type, interface0));
    type->SetFields(0,
        ::g::Outracks::Simulator::Protocol::ExceptionInfo_typeof(), offsetof(Error, _Exception), 0,
        ::g::Uno::String_typeof(), (uintptr_t)&Error::MessageType_, uFieldFlagsStatic);
    type->Reflection.SetFields(1,
        new uField("MessageType", 1));
    type->Reflection.SetFunctions(5,
        new uFunction("get_Exception", NULL, (void*)Error__get_Exception_fn, 0, false, ::g::Outracks::Simulator::Protocol::ExceptionInfo_typeof(), 0),
        new uFunction(".ctor", NULL, (void*)Error__New2_fn, 0, true, type, 1, ::g::Outracks::Simulator::Protocol::ExceptionInfo_typeof()),
        new uFunction("ReadDataFrom", NULL, (void*)Error__ReadDataFrom_fn, 0, true, type, 1, ::g::System::IO::BinaryReader_typeof()),
        new uFunction("get_Type", NULL, (void*)Error__get_Type_fn, 0, false, ::g::Uno::String_typeof(), 0),
        new uFunction("WriteDataTo", NULL, (void*)Error__WriteDataTo_fn, 0, false, uVoid_typeof(), 1, ::g::System::IO::BinaryWriter_typeof()));
}

Error_type* Error_typeof()
{
    static uSStrong<Error_type*> type;
    if (type != NULL) return type;

    uTypeOptions options;
    options.FieldCount = 2;
    options.InterfaceCount = 1;
    options.DependencyCount = 1;
    options.ObjectSize = sizeof(Error);
    options.TypeSize = sizeof(Error_type);
    type = (Error_type*)uClassType::New("Outracks.Simulator.Protocol.Error", options);
    type->fp_build_ = Error_build;
    type->fp_ctor_ = (void*)Error__New1_fn;
    type->fp_cctor_ = Error__cctor__fn;
    type->fp_ToString = (void(*)(uObject*, uString**))Error__ToString_fn;
    type->interface0.fp_WriteDataTo = (void(*)(uObject*, ::g::System::IO::BinaryWriter*))Error__WriteDataTo_fn;
    type->interface0.fp_get_Type = (void(*)(uObject*, uString**))Error__get_Type_fn;
    return type;
}

// private Error()
void Error__ctor__fn(Error* __this)
{
    __this->ctor_();
}

// public Error(Outracks.Simulator.Protocol.ExceptionInfo exception)
void Error__ctor_1_fn(Error* __this, ::g::Outracks::Simulator::Protocol::ExceptionInfo* exception)
{
    __this->ctor_1(exception);
}

// public generated Outracks.Simulator.Protocol.ExceptionInfo get_Exception()
void Error__get_Exception_fn(Error* __this, ::g::Outracks::Simulator::Protocol::ExceptionInfo** __retval)
{
    *__retval = __this->Exception();
}

// private generated void set_Exception(Outracks.Simulator.Protocol.ExceptionInfo value)
void Error__set_Exception_fn(Error* __this, ::g::Outracks::Simulator::Protocol::ExceptionInfo* value)
{
    __this->Exception(value);
}

// private Error New()
void Error__New1_fn(Error** __retval)
{
    *__retval = Error::New1();
}

// public Error New(Outracks.Simulator.Protocol.ExceptionInfo exception)
void Error__New2_fn(::g::Outracks::Simulator::Protocol::ExceptionInfo* exception, Error** __retval)
{
    *__retval = Error::New2(exception);
}

// public static Outracks.Simulator.Protocol.Error ReadDataFrom(System.IO.BinaryReader reader)
void Error__ReadDataFrom_fn(::g::System::IO::BinaryReader* reader, Error** __retval)
{
    *__retval = Error::ReadDataFrom(reader);
}

// public override sealed string ToString()
void Error__ToString_fn(Error* __this, uString** __retval)
{
    uStackFrame __("Outracks.Simulator.Protocol.Error", "ToString()");
    return *__retval = ::g::Uno::String::op_Addition2(::STRINGS[12/*"Error: "*/], uPtr(uPtr(__this->Exception())->Message)->ToString()), void();
}

// public string get_Type()
void Error__get_Type_fn(Error* __this, uString** __retval)
{
    *__retval = __this->Type();
}

// public void WriteDataTo(System.IO.BinaryWriter writer)
void Error__WriteDataTo_fn(Error* __this, ::g::System::IO::BinaryWriter* writer)
{
    __this->WriteDataTo(writer);
}

uSStrong<uString*> Error::MessageType_;

// private Error() [instance]
void Error::ctor_()
{
}

// public Error(Outracks.Simulator.Protocol.ExceptionInfo exception) [instance]
void Error::ctor_1(::g::Outracks::Simulator::Protocol::ExceptionInfo* exception)
{
    Exception(exception);
}

// public generated Outracks.Simulator.Protocol.ExceptionInfo get_Exception() [instance]
::g::Outracks::Simulator::Protocol::ExceptionInfo* Error::Exception()
{
    return _Exception;
}

// private generated void set_Exception(Outracks.Simulator.Protocol.ExceptionInfo value) [instance]
void Error::Exception(::g::Outracks::Simulator::Protocol::ExceptionInfo* value)
{
    _Exception = value;
}

// public string get_Type() [instance]
uString* Error::Type()
{
    return Error::MessageType_;
}

// public void WriteDataTo(System.IO.BinaryWriter writer) [instance]
void Error::WriteDataTo(::g::System::IO::BinaryWriter* writer)
{
    uStackFrame __("Outracks.Simulator.Protocol.Error", "WriteDataTo(System.IO.BinaryWriter)");
    ::g::Outracks::Simulator::Protocol::ExceptionInfo::Write(Exception(), writer);
}

// private Error New() [static]
Error* Error::New1()
{
    Error* obj2 = (Error*)uNew(Error_typeof());
    obj2->ctor_();
    return obj2;
}

// public Error New(Outracks.Simulator.Protocol.ExceptionInfo exception) [static]
Error* Error::New2(::g::Outracks::Simulator::Protocol::ExceptionInfo* exception)
{
    Error* obj1 = (Error*)uNew(Error_typeof());
    obj1->ctor_1(exception);
    return obj1;
}

// public static Outracks.Simulator.Protocol.Error ReadDataFrom(System.IO.BinaryReader reader) [static]
Error* Error::ReadDataFrom(::g::System::IO::BinaryReader* reader)
{
    uStackFrame __("Outracks.Simulator.Protocol.Error", "ReadDataFrom(System.IO.BinaryReader)");
    Error_typeof()->Init();
    ::g::Uno::Diagnostics::Debug::Log3(::STRINGS[10/*"Read Error"*/], 0, ::STRINGS[11/*"/usr/local/...*/], 28);
    ::g::Outracks::Simulator::Protocol::ExceptionInfo* exception = ::g::Outracks::Simulator::Protocol::ExceptionInfo::Read(reader);
    return Error::New2(exception);
}
// }

// /usr/local/share/uno/Packages/Outracks.Simulator.Common.Uno/0.0.0/Messages/ExceptionInfo.cs
// -------------------------------------------------------------------------------------------

// public sealed class ExceptionInfo
// {
static void ExceptionInfo_build(uType* type)
{
    ::TYPES[0] = ::g::Outracks::Simulator::ImmutableList_typeof()->MakeType(type, NULL);
    ::TYPES[1] = ::g::Outracks::Simulator::List_typeof()->MakeMethod(1/*Read<Outracks.Simulator.Protocol.ExceptionInfo>*/, type, NULL);
    ::TYPES[2] = ::g::Uno::Func1_typeof()->MakeType(::g::System::IO::BinaryReader_typeof(), type, NULL);
    ::TYPES[3] = ::g::Outracks::Simulator::List_typeof()->MakeMethod(6/*Write<Outracks.Simulator.Protocol.ExceptionInfo>*/, type, NULL);
    ::TYPES[4] = ::g::Uno::Action2_typeof()->MakeType(type, ::g::System::IO::BinaryWriter_typeof(), NULL);
    type->SetDependencies(
        ::g::Outracks::Simulator::Bytecode::TypeName_typeof());
    type->SetFields(0,
        ::g::Outracks::Simulator::Bytecode::TypeName_typeof(), offsetof(ExceptionInfo, Type), 0,
        ::g::Uno::String_typeof(), offsetof(ExceptionInfo, Message), 0,
        ::g::Uno::String_typeof(), offsetof(ExceptionInfo, StackTrace), 0,
        ::TYPES[0/*Outracks.Simulator.ImmutableList<Outracks.Simulator.Protocol.ExceptionInfo>*/], offsetof(ExceptionInfo, InnerExceptions), 0);
    type->Reflection.SetFields(4,
        new uField("InnerExceptions", 3),
        new uField("Message", 1),
        new uField("StackTrace", 2),
        new uField("Type", 0));
    type->Reflection.SetFunctions(4,
        new uFunction("Capture", NULL, (void*)ExceptionInfo__Capture_fn, 0, true, type, 1, ::g::Uno::Exception_typeof()),
        new uFunction(".ctor", NULL, (void*)ExceptionInfo__New1_fn, 0, true, type, 4, ::g::Outracks::Simulator::Bytecode::TypeName_typeof(), ::g::Uno::String_typeof(), ::g::Uno::String_typeof(), ::TYPES[0/*Outracks.Simulator.ImmutableList<Outracks.Simulator.Protocol.ExceptionInfo>*/]),
        new uFunction("Read", NULL, (void*)ExceptionInfo__Read_fn, 0, true, type, 1, ::g::System::IO::BinaryReader_typeof()),
        new uFunction("Write", NULL, (void*)ExceptionInfo__Write_fn, 0, true, uVoid_typeof(), 2, type, ::g::System::IO::BinaryWriter_typeof()));
}

uType* ExceptionInfo_typeof()
{
    static uSStrong<uType*> type;
    if (type != NULL) return type;

    uTypeOptions options;
    options.FieldCount = 4;
    options.DependencyCount = 1;
    options.ObjectSize = sizeof(ExceptionInfo);
    options.TypeSize = sizeof(uType);
    type = uClassType::New("Outracks.Simulator.Protocol.ExceptionInfo", options);
    type->fp_build_ = ExceptionInfo_build;
    return type;
}

// public ExceptionInfo(Outracks.Simulator.Bytecode.TypeName type, string message, string stackTrace, Outracks.Simulator.ImmutableList<Outracks.Simulator.Protocol.ExceptionInfo> innerExceptions)
void ExceptionInfo__ctor__fn(ExceptionInfo* __this, ::g::Outracks::Simulator::Bytecode::TypeName* type, uString* message, uString* stackTrace, ::g::Outracks::Simulator::ImmutableList* innerExceptions)
{
    __this->ctor_(type, message, stackTrace, innerExceptions);
}

// public static Outracks.Simulator.Protocol.ExceptionInfo Capture(Uno.Exception e)
void ExceptionInfo__Capture_fn(::g::Uno::Exception* e, ExceptionInfo** __retval)
{
    *__retval = ExceptionInfo::Capture(e);
}

// public ExceptionInfo New(Outracks.Simulator.Bytecode.TypeName type, string message, string stackTrace, Outracks.Simulator.ImmutableList<Outracks.Simulator.Protocol.ExceptionInfo> innerExceptions)
void ExceptionInfo__New1_fn(::g::Outracks::Simulator::Bytecode::TypeName* type, uString* message, uString* stackTrace, ::g::Outracks::Simulator::ImmutableList* innerExceptions, ExceptionInfo** __retval)
{
    *__retval = ExceptionInfo::New1(type, message, stackTrace, innerExceptions);
}

// public static Outracks.Simulator.Protocol.ExceptionInfo Read(System.IO.BinaryReader reader)
void ExceptionInfo__Read_fn(::g::System::IO::BinaryReader* reader, ExceptionInfo** __retval)
{
    *__retval = ExceptionInfo::Read(reader);
}

// public static void Write(Outracks.Simulator.Protocol.ExceptionInfo e, System.IO.BinaryWriter writer)
void ExceptionInfo__Write_fn(ExceptionInfo* e, ::g::System::IO::BinaryWriter* writer)
{
    ExceptionInfo::Write(e, writer);
}

// public ExceptionInfo(Outracks.Simulator.Bytecode.TypeName type, string message, string stackTrace, Outracks.Simulator.ImmutableList<Outracks.Simulator.Protocol.ExceptionInfo> innerExceptions) [instance]
void ExceptionInfo::ctor_(::g::Outracks::Simulator::Bytecode::TypeName* type, uString* message, uString* stackTrace, ::g::Outracks::Simulator::ImmutableList* innerExceptions)
{
    Type = type;
    Message = message;
    StackTrace = stackTrace;
    InnerExceptions = innerExceptions;
}

// public static Outracks.Simulator.Protocol.ExceptionInfo Capture(Uno.Exception e) [static]
ExceptionInfo* ExceptionInfo::Capture(::g::Uno::Exception* e)
{
    uStackFrame __("Outracks.Simulator.Protocol.ExceptionInfo", "Capture(Uno.Exception)");
    return ExceptionInfo::New1(::g::Outracks::Simulator::Bytecode::TypeName::Parse(uPtr(::g::Uno::Object::GetType(uPtr(e)))->ToString()), uPtr(e)->Message(), uPtr(e)->StackTrace(), (::g::Outracks::Simulator::ImmutableList*)::g::Outracks::Simulator::ImmutableList::Empty(::TYPES[0/*Outracks.Simulator.ImmutableList<Outracks.Simulator.Protocol.ExceptionInfo>*/]));
}

// public ExceptionInfo New(Outracks.Simulator.Bytecode.TypeName type, string message, string stackTrace, Outracks.Simulator.ImmutableList<Outracks.Simulator.Protocol.ExceptionInfo> innerExceptions) [static]
ExceptionInfo* ExceptionInfo::New1(::g::Outracks::Simulator::Bytecode::TypeName* type, uString* message, uString* stackTrace, ::g::Outracks::Simulator::ImmutableList* innerExceptions)
{
    ExceptionInfo* obj1 = (ExceptionInfo*)uNew(ExceptionInfo_typeof());
    obj1->ctor_(type, message, stackTrace, innerExceptions);
    return obj1;
}

// public static Outracks.Simulator.Protocol.ExceptionInfo Read(System.IO.BinaryReader reader) [static]
ExceptionInfo* ExceptionInfo::Read(::g::System::IO::BinaryReader* reader)
{
    uStackFrame __("Outracks.Simulator.Protocol.ExceptionInfo", "Read(System.IO.BinaryReader)");
    ::g::Outracks::Simulator::Bytecode::TypeName* type = (::g::Outracks::Simulator::Bytecode::TypeName*)uPtr(::g::Outracks::Simulator::Bytecode::TypeName::Read())->Invoke(1, reader);
    uString* message = uPtr(reader)->ReadString();
    uString* stackTrace = reader->ReadString();
    ::g::Outracks::Simulator::ImmutableList* innerExceptions = (::g::Outracks::Simulator::ImmutableList*)::g::Outracks::Simulator::List::Read(::TYPES[1/*Outracks.Simulator.List.Read<Outracks.Simulator.Protocol.ExceptionInfo>*/], reader, uDelegate::New(::TYPES[2/*Uno.Func<System.IO.BinaryReader, Outracks.Simulator.Protocol.ExceptionInfo>*/], (void*)ExceptionInfo__Read_fn));
    return ExceptionInfo::New1(type, message, stackTrace, innerExceptions);
}

// public static void Write(Outracks.Simulator.Protocol.ExceptionInfo e, System.IO.BinaryWriter writer) [static]
void ExceptionInfo::Write(ExceptionInfo* e, ::g::System::IO::BinaryWriter* writer)
{
    uStackFrame __("Outracks.Simulator.Protocol.ExceptionInfo", "Write(Outracks.Simulator.Protocol.ExceptionInfo,System.IO.BinaryWriter)");
    uPtr(::g::Outracks::Simulator::Bytecode::TypeName::Write())->Invoke(2, (::g::Outracks::Simulator::Bytecode::TypeName*)uPtr(e)->Type, writer);
    uPtr(writer)->Write6(e->Message);
    writer->Write6(e->StackTrace);
    ::g::Outracks::Simulator::List::Write1(::TYPES[3/*Outracks.Simulator.List.Write<Outracks.Simulator.Protocol.ExceptionInfo>*/], writer, e->InnerExceptions, uDelegate::New(::TYPES[4/*Uno.Action<Outracks.Simulator.Protocol.ExceptionInfo, System.IO.BinaryWriter>*/], (void*)ExceptionInfo__Write_fn));
}
// }

// /usr/local/share/uno/Packages/Outracks.Simulator.Common.Uno/0.0.0/Messages/RegisterName.cs
// ------------------------------------------------------------------------------------------

// public sealed class Ready
// {
// static generated Ready()
static void Ready__cctor__fn(uType* __type)
{
    Ready::MessageType_ = ::STRINGS[13/*"Ready"*/];
}

static void Ready_build(uType* type)
{
    ::STRINGS[13] = uString::Const("Ready");
    type->SetInterfaces(
        ::g::Outracks::IBinaryMessage_typeof(), offsetof(Ready_type, interface0));
    type->SetFields(0,
        ::g::Uno::String_typeof(), (uintptr_t)&Ready::MessageType_, uFieldFlagsStatic);
    type->Reflection.SetFields(1,
        new uField("MessageType", 0));
    type->Reflection.SetFunctions(4,
        new uFunction(".ctor", NULL, (void*)Ready__New1_fn, 0, true, type, 0),
        new uFunction("ReadDataFrom", NULL, (void*)Ready__ReadDataFrom_fn, 0, true, type, 1, ::g::System::IO::BinaryReader_typeof()),
        new uFunction("get_Type", NULL, (void*)Ready__get_Type_fn, 0, false, ::g::Uno::String_typeof(), 0),
        new uFunction("WriteDataTo", NULL, (void*)Ready__WriteDataTo_fn, 0, false, uVoid_typeof(), 1, ::g::System::IO::BinaryWriter_typeof()));
}

Ready_type* Ready_typeof()
{
    static uSStrong<Ready_type*> type;
    if (type != NULL) return type;

    uTypeOptions options;
    options.FieldCount = 1;
    options.InterfaceCount = 1;
    options.ObjectSize = sizeof(Ready);
    options.TypeSize = sizeof(Ready_type);
    type = (Ready_type*)uClassType::New("Outracks.Simulator.Protocol.Ready", options);
    type->fp_build_ = Ready_build;
    type->fp_ctor_ = (void*)Ready__New1_fn;
    type->fp_cctor_ = Ready__cctor__fn;
    type->interface0.fp_WriteDataTo = (void(*)(uObject*, ::g::System::IO::BinaryWriter*))Ready__WriteDataTo_fn;
    type->interface0.fp_get_Type = (void(*)(uObject*, uString**))Ready__get_Type_fn;
    return type;
}

// public generated Ready()
void Ready__ctor__fn(Ready* __this)
{
    __this->ctor_();
}

// public generated Ready New()
void Ready__New1_fn(Ready** __retval)
{
    *__retval = Ready::New1();
}

// public static Outracks.Simulator.Protocol.Ready ReadDataFrom(System.IO.BinaryReader reader)
void Ready__ReadDataFrom_fn(::g::System::IO::BinaryReader* reader, Ready** __retval)
{
    *__retval = Ready::ReadDataFrom(reader);
}

// public string get_Type()
void Ready__get_Type_fn(Ready* __this, uString** __retval)
{
    *__retval = __this->Type();
}

// public void WriteDataTo(System.IO.BinaryWriter writer)
void Ready__WriteDataTo_fn(Ready* __this, ::g::System::IO::BinaryWriter* writer)
{
    __this->WriteDataTo(writer);
}

uSStrong<uString*> Ready::MessageType_;

// public generated Ready() [instance]
void Ready::ctor_()
{
}

// public string get_Type() [instance]
uString* Ready::Type()
{
    return Ready::MessageType_;
}

// public void WriteDataTo(System.IO.BinaryWriter writer) [instance]
void Ready::WriteDataTo(::g::System::IO::BinaryWriter* writer)
{
}

// public generated Ready New() [static]
Ready* Ready::New1()
{
    Ready* obj1 = (Ready*)uNew(Ready_typeof());
    obj1->ctor_();
    return obj1;
}

// public static Outracks.Simulator.Protocol.Ready ReadDataFrom(System.IO.BinaryReader reader) [static]
Ready* Ready::ReadDataFrom(::g::System::IO::BinaryReader* reader)
{
    Ready_typeof()->Init();
    return Ready::New1();
}
// }

// /usr/local/share/uno/Packages/Outracks.Simulator.Common.Uno/0.0.0/Messages/RegisterName.cs
// ------------------------------------------------------------------------------------------

// public sealed class RegisterName
// {
// static generated RegisterName()
static void RegisterName__cctor__fn(uType* __type)
{
    RegisterName::MessageType_ = ::STRINGS[14/*"RegisterName"*/];
}

static void RegisterName_build(uType* type)
{
    ::STRINGS[14] = uString::Const("RegisterName");
    type->SetInterfaces(
        ::g::Outracks::IBinaryMessage_typeof(), offsetof(RegisterName_type, interface0));
    type->SetFields(0,
        ::g::Uno::String_typeof(), offsetof(RegisterName, _DeviceId), 0,
        ::g::Uno::String_typeof(), offsetof(RegisterName, _DeviceName), 0,
        ::g::Uno::String_typeof(), (uintptr_t)&RegisterName::MessageType_, uFieldFlagsStatic);
    type->Reflection.SetFields(1,
        new uField("MessageType", 2));
    type->Reflection.SetFunctions(6,
        new uFunction("get_DeviceId", NULL, (void*)RegisterName__get_DeviceId_fn, 0, false, ::g::Uno::String_typeof(), 0),
        new uFunction("get_DeviceName", NULL, (void*)RegisterName__get_DeviceName_fn, 0, false, ::g::Uno::String_typeof(), 0),
        new uFunction(".ctor", NULL, (void*)RegisterName__New2_fn, 0, true, type, 2, ::g::Uno::String_typeof(), ::g::Uno::String_typeof()),
        new uFunction("ReadDataFrom", NULL, (void*)RegisterName__ReadDataFrom_fn, 0, true, type, 1, ::g::System::IO::BinaryReader_typeof()),
        new uFunction("get_Type", NULL, (void*)RegisterName__get_Type_fn, 0, false, ::g::Uno::String_typeof(), 0),
        new uFunction("WriteDataTo", NULL, (void*)RegisterName__WriteDataTo_fn, 0, false, uVoid_typeof(), 1, ::g::System::IO::BinaryWriter_typeof()));
}

RegisterName_type* RegisterName_typeof()
{
    static uSStrong<RegisterName_type*> type;
    if (type != NULL) return type;

    uTypeOptions options;
    options.FieldCount = 3;
    options.InterfaceCount = 1;
    options.ObjectSize = sizeof(RegisterName);
    options.TypeSize = sizeof(RegisterName_type);
    type = (RegisterName_type*)uClassType::New("Outracks.Simulator.Protocol.RegisterName", options);
    type->fp_build_ = RegisterName_build;
    type->fp_ctor_ = (void*)RegisterName__New1_fn;
    type->fp_cctor_ = RegisterName__cctor__fn;
    type->interface0.fp_WriteDataTo = (void(*)(uObject*, ::g::System::IO::BinaryWriter*))RegisterName__WriteDataTo_fn;
    type->interface0.fp_get_Type = (void(*)(uObject*, uString**))RegisterName__get_Type_fn;
    return type;
}

// private RegisterName()
void RegisterName__ctor__fn(RegisterName* __this)
{
    __this->ctor_();
}

// public RegisterName(string deviceId, string deviceName)
void RegisterName__ctor_1_fn(RegisterName* __this, uString* deviceId, uString* deviceName)
{
    __this->ctor_1(deviceId, deviceName);
}

// public generated string get_DeviceId()
void RegisterName__get_DeviceId_fn(RegisterName* __this, uString** __retval)
{
    *__retval = __this->DeviceId();
}

// private generated void set_DeviceId(string value)
void RegisterName__set_DeviceId_fn(RegisterName* __this, uString* value)
{
    __this->DeviceId(value);
}

// public generated string get_DeviceName()
void RegisterName__get_DeviceName_fn(RegisterName* __this, uString** __retval)
{
    *__retval = __this->DeviceName();
}

// private generated void set_DeviceName(string value)
void RegisterName__set_DeviceName_fn(RegisterName* __this, uString* value)
{
    __this->DeviceName(value);
}

// private RegisterName New()
void RegisterName__New1_fn(RegisterName** __retval)
{
    *__retval = RegisterName::New1();
}

// public RegisterName New(string deviceId, string deviceName)
void RegisterName__New2_fn(uString* deviceId, uString* deviceName, RegisterName** __retval)
{
    *__retval = RegisterName::New2(deviceId, deviceName);
}

// public static Outracks.Simulator.Protocol.RegisterName ReadDataFrom(System.IO.BinaryReader reader)
void RegisterName__ReadDataFrom_fn(::g::System::IO::BinaryReader* reader, RegisterName** __retval)
{
    *__retval = RegisterName::ReadDataFrom(reader);
}

// public string get_Type()
void RegisterName__get_Type_fn(RegisterName* __this, uString** __retval)
{
    *__retval = __this->Type();
}

// public void WriteDataTo(System.IO.BinaryWriter writer)
void RegisterName__WriteDataTo_fn(RegisterName* __this, ::g::System::IO::BinaryWriter* writer)
{
    __this->WriteDataTo(writer);
}

uSStrong<uString*> RegisterName::MessageType_;

// private RegisterName() [instance]
void RegisterName::ctor_()
{
}

// public RegisterName(string deviceId, string deviceName) [instance]
void RegisterName::ctor_1(uString* deviceId, uString* deviceName)
{
    DeviceId(deviceId);
    DeviceName(deviceName);
}

// public generated string get_DeviceId() [instance]
uString* RegisterName::DeviceId()
{
    return _DeviceId;
}

// private generated void set_DeviceId(string value) [instance]
void RegisterName::DeviceId(uString* value)
{
    _DeviceId = value;
}

// public generated string get_DeviceName() [instance]
uString* RegisterName::DeviceName()
{
    return _DeviceName;
}

// private generated void set_DeviceName(string value) [instance]
void RegisterName::DeviceName(uString* value)
{
    _DeviceName = value;
}

// public string get_Type() [instance]
uString* RegisterName::Type()
{
    return RegisterName::MessageType_;
}

// public void WriteDataTo(System.IO.BinaryWriter writer) [instance]
void RegisterName::WriteDataTo(::g::System::IO::BinaryWriter* writer)
{
    uStackFrame __("Outracks.Simulator.Protocol.RegisterName", "WriteDataTo(System.IO.BinaryWriter)");
    uPtr(writer)->Write6(DeviceId());
    writer->Write6(DeviceName());
}

// private RegisterName New() [static]
RegisterName* RegisterName::New1()
{
    RegisterName* obj2 = (RegisterName*)uNew(RegisterName_typeof());
    obj2->ctor_();
    return obj2;
}

// public RegisterName New(string deviceId, string deviceName) [static]
RegisterName* RegisterName::New2(uString* deviceId, uString* deviceName)
{
    RegisterName* obj1 = (RegisterName*)uNew(RegisterName_typeof());
    obj1->ctor_1(deviceId, deviceName);
    return obj1;
}

// public static Outracks.Simulator.Protocol.RegisterName ReadDataFrom(System.IO.BinaryReader reader) [static]
RegisterName* RegisterName::ReadDataFrom(::g::System::IO::BinaryReader* reader)
{
    uStackFrame __("Outracks.Simulator.Protocol.RegisterName", "ReadDataFrom(System.IO.BinaryReader)");
    RegisterName_typeof()->Init();
    uString* deviceId = uPtr(reader)->ReadString();
    uString* deviceName = reader->ReadString();
    return RegisterName::New2(deviceId, deviceName);
}
// }

// /usr/local/share/uno/Packages/Outracks.Simulator.Common.Uno/0.0.0/Messages/DebugLog.cs
// --------------------------------------------------------------------------------------

// public sealed class TriggerProgress
// {
// static generated TriggerProgress()
static void TriggerProgress__cctor__fn(uType* __type)
{
    TriggerProgress::MessageType_ = ::STRINGS[15/*"TriggerProg...*/];
}

static void TriggerProgress_build(uType* type)
{
    ::STRINGS[15] = uString::Const("TriggerProgress");
    type->SetInterfaces(
        ::g::Outracks::IBinaryMessage_typeof(), offsetof(TriggerProgress_type, interface0));
    type->SetFields(0,
        ::g::Uno::Double_typeof(), offsetof(TriggerProgress, _Progress), 0,
        ::g::Uno::String_typeof(), (uintptr_t)&TriggerProgress::MessageType_, uFieldFlagsStatic);
    type->Reflection.SetFields(1,
        new uField("MessageType", 1));
    type->Reflection.SetFunctions(5,
        new uFunction(".ctor", NULL, (void*)TriggerProgress__New2_fn, 0, true, type, 1, ::g::Uno::Double_typeof()),
        new uFunction("get_Progress", NULL, (void*)TriggerProgress__get_Progress_fn, 0, false, ::g::Uno::Double_typeof(), 0),
        new uFunction("ReadDataFrom", NULL, (void*)TriggerProgress__ReadDataFrom_fn, 0, true, type, 1, ::g::System::IO::BinaryReader_typeof()),
        new uFunction("get_Type", NULL, (void*)TriggerProgress__get_Type_fn, 0, false, ::g::Uno::String_typeof(), 0),
        new uFunction("WriteDataTo", NULL, (void*)TriggerProgress__WriteDataTo_fn, 0, false, uVoid_typeof(), 1, ::g::System::IO::BinaryWriter_typeof()));
}

TriggerProgress_type* TriggerProgress_typeof()
{
    static uSStrong<TriggerProgress_type*> type;
    if (type != NULL) return type;

    uTypeOptions options;
    options.FieldCount = 2;
    options.InterfaceCount = 1;
    options.ObjectSize = sizeof(TriggerProgress);
    options.TypeSize = sizeof(TriggerProgress_type);
    type = (TriggerProgress_type*)uClassType::New("Outracks.Simulator.Protocol.TriggerProgress", options);
    type->fp_build_ = TriggerProgress_build;
    type->fp_ctor_ = (void*)TriggerProgress__New1_fn;
    type->fp_cctor_ = TriggerProgress__cctor__fn;
    type->interface0.fp_WriteDataTo = (void(*)(uObject*, ::g::System::IO::BinaryWriter*))TriggerProgress__WriteDataTo_fn;
    type->interface0.fp_get_Type = (void(*)(uObject*, uString**))TriggerProgress__get_Type_fn;
    return type;
}

// private TriggerProgress()
void TriggerProgress__ctor__fn(TriggerProgress* __this)
{
    __this->ctor_();
}

// public TriggerProgress(double progress)
void TriggerProgress__ctor_1_fn(TriggerProgress* __this, double* progress)
{
    __this->ctor_1(*progress);
}

// private TriggerProgress New()
void TriggerProgress__New1_fn(TriggerProgress** __retval)
{
    *__retval = TriggerProgress::New1();
}

// public TriggerProgress New(double progress)
void TriggerProgress__New2_fn(double* progress, TriggerProgress** __retval)
{
    *__retval = TriggerProgress::New2(*progress);
}

// public generated double get_Progress()
void TriggerProgress__get_Progress_fn(TriggerProgress* __this, double* __retval)
{
    *__retval = __this->Progress();
}

// private generated void set_Progress(double value)
void TriggerProgress__set_Progress_fn(TriggerProgress* __this, double* value)
{
    __this->Progress(*value);
}

// public static Outracks.Simulator.Protocol.TriggerProgress ReadDataFrom(System.IO.BinaryReader reader)
void TriggerProgress__ReadDataFrom_fn(::g::System::IO::BinaryReader* reader, TriggerProgress** __retval)
{
    *__retval = TriggerProgress::ReadDataFrom(reader);
}

// public string get_Type()
void TriggerProgress__get_Type_fn(TriggerProgress* __this, uString** __retval)
{
    *__retval = __this->Type();
}

// public void WriteDataTo(System.IO.BinaryWriter writer)
void TriggerProgress__WriteDataTo_fn(TriggerProgress* __this, ::g::System::IO::BinaryWriter* writer)
{
    __this->WriteDataTo(writer);
}

uSStrong<uString*> TriggerProgress::MessageType_;

// private TriggerProgress() [instance]
void TriggerProgress::ctor_()
{
}

// public TriggerProgress(double progress) [instance]
void TriggerProgress::ctor_1(double progress)
{
    Progress(progress);
}

// public generated double get_Progress() [instance]
double TriggerProgress::Progress()
{
    return _Progress;
}

// private generated void set_Progress(double value) [instance]
void TriggerProgress::Progress(double value)
{
    _Progress = value;
}

// public string get_Type() [instance]
uString* TriggerProgress::Type()
{
    return TriggerProgress::MessageType_;
}

// public void WriteDataTo(System.IO.BinaryWriter writer) [instance]
void TriggerProgress::WriteDataTo(::g::System::IO::BinaryWriter* writer)
{
    uStackFrame __("Outracks.Simulator.Protocol.TriggerProgress", "WriteDataTo(System.IO.BinaryWriter)");
    uPtr(writer)->Write3(Progress());
}

// private TriggerProgress New() [static]
TriggerProgress* TriggerProgress::New1()
{
    TriggerProgress* obj2 = (TriggerProgress*)uNew(TriggerProgress_typeof());
    obj2->ctor_();
    return obj2;
}

// public TriggerProgress New(double progress) [static]
TriggerProgress* TriggerProgress::New2(double progress)
{
    TriggerProgress* obj1 = (TriggerProgress*)uNew(TriggerProgress_typeof());
    obj1->ctor_1(progress);
    return obj1;
}

// public static Outracks.Simulator.Protocol.TriggerProgress ReadDataFrom(System.IO.BinaryReader reader) [static]
TriggerProgress* TriggerProgress::ReadDataFrom(::g::System::IO::BinaryReader* reader)
{
    uStackFrame __("Outracks.Simulator.Protocol.TriggerProgress", "ReadDataFrom(System.IO.BinaryReader)");
    TriggerProgress_typeof()->Init();
    double progress = uPtr(reader)->ReadDouble();
    return TriggerProgress::New2(progress);
}
// }

// /usr/local/share/uno/Packages/Outracks.Simulator.Common.Uno/0.0.0/Messages/UnhandledException.cs
// ------------------------------------------------------------------------------------------------

// public sealed class UnhandledException
// {
// static generated UnhandledException()
static void UnhandledException__cctor__fn(uType* __type)
{
    UnhandledException::MessageType_ = ::STRINGS[16/*"UnhandledEx...*/];
}

static void UnhandledException_build(uType* type)
{
    ::STRINGS[16] = uString::Const("UnhandledException");
    type->SetInterfaces(
        ::g::Outracks::IBinaryMessage_typeof(), offsetof(UnhandledException_type, interface0));
    type->SetFields(0,
        ::g::Uno::String_typeof(), offsetof(UnhandledException, _DeviceId), 0,
        ::g::Uno::String_typeof(), offsetof(UnhandledException, _DeviceName), 0,
        ::g::Uno::String_typeof(), offsetof(UnhandledException, _ExceptionType), 0,
        ::g::Uno::String_typeof(), offsetof(UnhandledException, _Message), 0,
        ::g::Uno::String_typeof(), offsetof(UnhandledException, _StackTrace), 0,
        ::g::Uno::String_typeof(), (uintptr_t)&UnhandledException::MessageType_, uFieldFlagsStatic);
    type->Reflection.SetFields(1,
        new uField("MessageType", 5));
    type->Reflection.SetFunctions(9,
        new uFunction("get_DeviceId", NULL, (void*)UnhandledException__get_DeviceId_fn, 0, false, ::g::Uno::String_typeof(), 0),
        new uFunction("get_DeviceName", NULL, (void*)UnhandledException__get_DeviceName_fn, 0, false, ::g::Uno::String_typeof(), 0),
        new uFunction("get_ExceptionType", NULL, (void*)UnhandledException__get_ExceptionType_fn, 0, false, ::g::Uno::String_typeof(), 0),
        new uFunction("get_Message", NULL, (void*)UnhandledException__get_Message_fn, 0, false, ::g::Uno::String_typeof(), 0),
        new uFunction(".ctor", NULL, (void*)UnhandledException__New2_fn, 0, true, type, 5, ::g::Uno::String_typeof(), ::g::Uno::String_typeof(), ::g::Uno::String_typeof(), ::g::Uno::String_typeof(), ::g::Uno::String_typeof()),
        new uFunction("ReadDataFrom", NULL, (void*)UnhandledException__ReadDataFrom_fn, 0, true, type, 1, ::g::System::IO::BinaryReader_typeof()),
        new uFunction("get_StackTrace", NULL, (void*)UnhandledException__get_StackTrace_fn, 0, false, ::g::Uno::String_typeof(), 0),
        new uFunction("get_Type", NULL, (void*)UnhandledException__get_Type_fn, 0, false, ::g::Uno::String_typeof(), 0),
        new uFunction("WriteDataTo", NULL, (void*)UnhandledException__WriteDataTo_fn, 0, false, uVoid_typeof(), 1, ::g::System::IO::BinaryWriter_typeof()));
}

UnhandledException_type* UnhandledException_typeof()
{
    static uSStrong<UnhandledException_type*> type;
    if (type != NULL) return type;

    uTypeOptions options;
    options.FieldCount = 6;
    options.InterfaceCount = 1;
    options.ObjectSize = sizeof(UnhandledException);
    options.TypeSize = sizeof(UnhandledException_type);
    type = (UnhandledException_type*)uClassType::New("Outracks.Simulator.Protocol.UnhandledException", options);
    type->fp_build_ = UnhandledException_build;
    type->fp_ctor_ = (void*)UnhandledException__New1_fn;
    type->fp_cctor_ = UnhandledException__cctor__fn;
    type->interface0.fp_WriteDataTo = (void(*)(uObject*, ::g::System::IO::BinaryWriter*))UnhandledException__WriteDataTo_fn;
    type->interface0.fp_get_Type = (void(*)(uObject*, uString**))UnhandledException__get_Type_fn;
    return type;
}

// private UnhandledException()
void UnhandledException__ctor__fn(UnhandledException* __this)
{
    __this->ctor_();
}

// public UnhandledException(string deviceId, string deviceName, string message, string stackTrace, string type)
void UnhandledException__ctor_1_fn(UnhandledException* __this, uString* deviceId, uString* deviceName, uString* message, uString* stackTrace, uString* type)
{
    __this->ctor_1(deviceId, deviceName, message, stackTrace, type);
}

// public generated string get_DeviceId()
void UnhandledException__get_DeviceId_fn(UnhandledException* __this, uString** __retval)
{
    *__retval = __this->DeviceId();
}

// private generated void set_DeviceId(string value)
void UnhandledException__set_DeviceId_fn(UnhandledException* __this, uString* value)
{
    __this->DeviceId(value);
}

// public generated string get_DeviceName()
void UnhandledException__get_DeviceName_fn(UnhandledException* __this, uString** __retval)
{
    *__retval = __this->DeviceName();
}

// private generated void set_DeviceName(string value)
void UnhandledException__set_DeviceName_fn(UnhandledException* __this, uString* value)
{
    __this->DeviceName(value);
}

// public generated string get_ExceptionType()
void UnhandledException__get_ExceptionType_fn(UnhandledException* __this, uString** __retval)
{
    *__retval = __this->ExceptionType();
}

// private generated void set_ExceptionType(string value)
void UnhandledException__set_ExceptionType_fn(UnhandledException* __this, uString* value)
{
    __this->ExceptionType(value);
}

// public generated string get_Message()
void UnhandledException__get_Message_fn(UnhandledException* __this, uString** __retval)
{
    *__retval = __this->Message();
}

// private generated void set_Message(string value)
void UnhandledException__set_Message_fn(UnhandledException* __this, uString* value)
{
    __this->Message(value);
}

// private UnhandledException New()
void UnhandledException__New1_fn(UnhandledException** __retval)
{
    *__retval = UnhandledException::New1();
}

// public UnhandledException New(string deviceId, string deviceName, string message, string stackTrace, string type)
void UnhandledException__New2_fn(uString* deviceId, uString* deviceName, uString* message, uString* stackTrace, uString* type, UnhandledException** __retval)
{
    *__retval = UnhandledException::New2(deviceId, deviceName, message, stackTrace, type);
}

// public static Outracks.Simulator.Protocol.UnhandledException ReadDataFrom(System.IO.BinaryReader reader)
void UnhandledException__ReadDataFrom_fn(::g::System::IO::BinaryReader* reader, UnhandledException** __retval)
{
    *__retval = UnhandledException::ReadDataFrom(reader);
}

// public generated string get_StackTrace()
void UnhandledException__get_StackTrace_fn(UnhandledException* __this, uString** __retval)
{
    *__retval = __this->StackTrace();
}

// private generated void set_StackTrace(string value)
void UnhandledException__set_StackTrace_fn(UnhandledException* __this, uString* value)
{
    __this->StackTrace(value);
}

// public string get_Type()
void UnhandledException__get_Type_fn(UnhandledException* __this, uString** __retval)
{
    *__retval = __this->Type();
}

// public void WriteDataTo(System.IO.BinaryWriter writer)
void UnhandledException__WriteDataTo_fn(UnhandledException* __this, ::g::System::IO::BinaryWriter* writer)
{
    __this->WriteDataTo(writer);
}

uSStrong<uString*> UnhandledException::MessageType_;

// private UnhandledException() [instance]
void UnhandledException::ctor_()
{
}

// public UnhandledException(string deviceId, string deviceName, string message, string stackTrace, string type) [instance]
void UnhandledException::ctor_1(uString* deviceId, uString* deviceName, uString* message, uString* stackTrace, uString* type)
{
    DeviceId(deviceId);
    DeviceName(deviceName);
    Message(message);
    StackTrace(stackTrace);
    ExceptionType(type);
}

// public generated string get_DeviceId() [instance]
uString* UnhandledException::DeviceId()
{
    return _DeviceId;
}

// private generated void set_DeviceId(string value) [instance]
void UnhandledException::DeviceId(uString* value)
{
    _DeviceId = value;
}

// public generated string get_DeviceName() [instance]
uString* UnhandledException::DeviceName()
{
    return _DeviceName;
}

// private generated void set_DeviceName(string value) [instance]
void UnhandledException::DeviceName(uString* value)
{
    _DeviceName = value;
}

// public generated string get_ExceptionType() [instance]
uString* UnhandledException::ExceptionType()
{
    return _ExceptionType;
}

// private generated void set_ExceptionType(string value) [instance]
void UnhandledException::ExceptionType(uString* value)
{
    _ExceptionType = value;
}

// public generated string get_Message() [instance]
uString* UnhandledException::Message()
{
    return _Message;
}

// private generated void set_Message(string value) [instance]
void UnhandledException::Message(uString* value)
{
    _Message = value;
}

// public generated string get_StackTrace() [instance]
uString* UnhandledException::StackTrace()
{
    return _StackTrace;
}

// private generated void set_StackTrace(string value) [instance]
void UnhandledException::StackTrace(uString* value)
{
    _StackTrace = value;
}

// public string get_Type() [instance]
uString* UnhandledException::Type()
{
    return UnhandledException::MessageType_;
}

// public void WriteDataTo(System.IO.BinaryWriter writer) [instance]
void UnhandledException::WriteDataTo(::g::System::IO::BinaryWriter* writer)
{
    uStackFrame __("Outracks.Simulator.Protocol.UnhandledException", "WriteDataTo(System.IO.BinaryWriter)");
    uPtr(writer)->Write6(DeviceId());
    writer->Write6(DeviceName());
    writer->Write6(Message());
    writer->Write6(StackTrace());
    writer->Write6(Type());
}

// private UnhandledException New() [static]
UnhandledException* UnhandledException::New1()
{
    UnhandledException* obj2 = (UnhandledException*)uNew(UnhandledException_typeof());
    obj2->ctor_();
    return obj2;
}

// public UnhandledException New(string deviceId, string deviceName, string message, string stackTrace, string type) [static]
UnhandledException* UnhandledException::New2(uString* deviceId, uString* deviceName, uString* message, uString* stackTrace, uString* type)
{
    UnhandledException* obj1 = (UnhandledException*)uNew(UnhandledException_typeof());
    obj1->ctor_1(deviceId, deviceName, message, stackTrace, type);
    return obj1;
}

// public static Outracks.Simulator.Protocol.UnhandledException ReadDataFrom(System.IO.BinaryReader reader) [static]
UnhandledException* UnhandledException::ReadDataFrom(::g::System::IO::BinaryReader* reader)
{
    uStackFrame __("Outracks.Simulator.Protocol.UnhandledException", "ReadDataFrom(System.IO.BinaryReader)");
    UnhandledException_typeof()->Init();
    uString* deviceId = uPtr(reader)->ReadString();
    uString* deviceName = reader->ReadString();
    uString* message = reader->ReadString();
    uString* stackTrace = reader->ReadString();
    uString* type = reader->ReadString();
    return UnhandledException::New2(deviceId, deviceName, message, stackTrace, type);
}
// }

}}}} // ::g::Outracks::Simulator::Protocol
