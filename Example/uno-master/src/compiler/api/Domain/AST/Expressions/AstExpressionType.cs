using Uno.Compiler.API.Domain.AST.Statements;

namespace Uno.Compiler.API.Domain.AST.Expressions
{
    public enum AstExpressionType : byte
    {
        Undef = 0,

        // AstSymbol
        Null = AstStatementType.MaxValue,
        Global,
        Void,
        Var,
        This,
        Base,
        True,
        False,
        Zero,

        // AstUnary
        Array,
        Default,
        Checked,
        Unchecked,
        Unsafe,
        NameOf,
        SizeOf,
        TypeOf,
        Nullable,
        ReadOnly,
        Volatile,
        Vertex,
        Pixel,
        DecreasePrefix,
        DecreasePostfix,
        IncreasePrefix,
        IncreasePostfix,
        Promote,
        Negate,
        LogNot,
        BitwiseNot,

        // AstBinary
        Add,
        Sub,
        Mul,
        Div,
        Mod,
        BitwiseAnd,
        BitwiseOr,
        BitwiseXor,
        ShiftLeft,
        ShiftRight,
        LogAnd,
        LogOr,
        Assign,
        AddAssign,
        SubAssign,
        MulAssign,
        DivAssign,
        ModAssign,
        BitwiseAndAssign,
        BitwiseOrAssign,
        BitwiseXorAssign,
        ShiftLeftAssign,
        ShiftRightAssign,
        LogAndAssign,
        LogOrAssign,
        NullOp,
        Equal,
        NotEqual,
        LessThan,
        LessThanOrEqual,
        GreaterThan,
        GreaterThanOrEqual,
        Is,
        As,
        Sequence,

        // AstCall
        Call,
        LookUp,

        // Others
        Identifier,
        Parameterizer,
        ArrayInitializer,
        FixedArrayInitializer,
        Initializer,
        Import,
        Defined,
        Local,
        FixedArray,
        Generic,
        BuiltinType,
        Ternary,
        Cast,
        Member,
        New,
        Prev,
        Extern,
        VertexAttribImplicit,
        VertexAttribExplicit,
        PixelSampler,
        Macro,
        Lambda,
        ParameterList,
        String,
        Float,
        Double,
        Int,
        UInt,
        Long,
        ULong,
        Char,

        // Max
        MaxValue
    }
}